import logging
import random
import sqlite3
import requests
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

CATEGORY, MENU, CONFIRM, COMMENT_DECISION, COMMENT, TIME, NAME, PAYMENT, READY, FEEDBACK, CART, START_BUTTON, SOMETHING_ELSE, CONFIRM_DRINK = range(14)

def get_start_keyboard():
    return ReplyKeyboardMarkup([["–°–¢–ê–†–¢"]], one_time_keyboard=True, resize_keyboard=True)

async def welcome(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –°–¢–ê–†–¢ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è."""
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –°–¢–ê–†–¢, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.", reply_markup=get_start_keyboard())
    return START_BUTTON

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."""
    category_mapping = {
        "1": "–ó–∞–≤—Ç—Ä–∞–∫",
        "2": "–°—É–ø—ã",
        "3": "–í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞",
        "4": "–°–∞–ª–∞—Ç—ã",
        "5": "–í—ã–ø–µ—á–∫–∞",
        "6": "–î–µ—Å–µ—Ä—Ç",
        "7": "–ü–∏—Ü—Ü–∞",
        "8": "–ù–∞–ø–∏—Ç–∫–∏"
    }
    context.user_data['category_mapping'] = category_mapping
    if "cart" not in context.user_data:
        context.user_data["cart"] = []

    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ—Ñ–µ–π–Ω–∏ –ë–∏–æ—Ñ—É–¥ –Ω–∞ –ê8 –≤ –î–§–í–£! –°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–∏ –ø–µ—Ä–µ—Ä—ã–≤—ã –º–µ–∂–¥—É –ø–∞—Ä–∞–º–∏ –≤–∫—É—Å–Ω—ã–º–∏ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–º–∏! üçµ‚ú®\n"
    )
    return await show_categories_only(update, context)

async def show_categories_only(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    reply_keyboard = [
        ["1", "2", "3", "4"],
        ["5", "6", "7", "8"],
        ["–ö–æ—Ä–∑–∏–Ω–∞ üõí"]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:\n\n"
        "1. –ó–∞–≤—Ç—Ä–∞–∫–∏ üçΩ\n"
        "2. –°—É–ø—ã ü•ò\n"
        "3. –í—Ç–æ—Ä—ã–µ –±–ª—é–¥–∞ üç≤\n"
        "4. –°–∞–ª–∞—Ç—ã ü•ó\n"
        "5. –í—ã–ø–µ—á–∫–∞ ü•ê\n"
        "6. –î–µ—Å–µ—Ä—Ç—ã üç∞\n"
        "7. –ü–∏—Ü—Ü–∞ üçï\n"
        "8. –ù–∞–ø–∏—Ç–∫–∏ ‚òïÔ∏è",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CATEGORY

async def go_back(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    return await show_categories_only(update, context)

async def get_dishes_by_category(category: str):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª—é–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    conn = sqlite3.connect("db.sqlite3") 
    cursor = conn.cursor()
    
    if category.lower() == "–Ω–∞–ø–∏—Ç–∫–∏":
        cursor.execute("SELECT name FROM botdata_drink")
    else:
        cursor.execute("SELECT name FROM botdata_product WHERE category = ?", (category,))
    
    dishes = [row[0] for row in cursor.fetchall()]
    conn.close()
    return dishes

async def category_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥."""
    user_choice = update.message.text
    
    if user_choice == "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        return await show_cart(update, context)
    if user_choice == "–ù–∞–∑–∞–¥":
        return await show_categories_only(update, context)
    
    category_mapping = context.user_data.get('category_mapping', {})
    category = category_mapping.get(user_choice)
    
    if not category:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return CATEGORY
    
    context.user_data['category'] = category
    
    dishes = await get_dishes_by_category(category)
    
    reply_keyboard = [[dish] for dish in dishes] + [["–ù–∞–∑–∞–¥", "–ö–æ—Ä–∑–∏–Ω–∞ üõí"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª—é–¥–æ:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    
    return MENU

async def menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±–ª—é–¥–µ –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É.
       –î–ª—è –Ω–∞–ø–∏—Ç–∫–æ–≤ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
    user_choice = update.message.text

    if user_choice == "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        return await show_cart(update, context)
    if user_choice == "–ù–∞–∑–∞–¥":
        return await go_back(update, context)

    category = context.user_data.get("category", "")
    
    if category.lower() == "–Ω–∞–ø–∏—Ç–∫–∏":
        if context.user_data.get("selected_drink") is None:
            conn = sqlite3.connect("db.sqlite3")
            cursor = conn.cursor()
            cursor.execute("SELECT name, price FROM botdata_drink WHERE name = ?", (user_choice,))
            drink = cursor.fetchone()
            conn.close()
            if not drink:
                return await go_back(update, context)
            name, price = drink
            context.user_data["selected_drink"] = {"name": name, "price": price}
            reply_keyboard = [["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"], ["–ù–∞–∑–∞–¥", "–ö–æ—Ä–∑–∏–Ω–∞ üõí"]]
            await update.message.reply_text(
                f"{name}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±.\n\n–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É?",
                reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
            )
            return CONFIRM_DRINK  
        else:
            pass
    else:
        conn = sqlite3.connect("db.sqlite3")
        cursor = conn.cursor()
        cursor.execute(
            "SELECT name, description, composition, price, path FROM botdata_product WHERE name = ?",
            (user_choice,)
        )
        dish = cursor.fetchone()
        conn.close()
        if not dish:
            return await go_back(update, context)
        name, description, composition, price, path = dish
        context.user_data["selected_dish"] = {
            "name": name,
            "description": description,
            "composition": composition,
            "price": price,
            "photo": path
        }
        message_text = (
            f"{name}\n\n{description}\n\n–°–æ—Å—Ç–∞–≤: {composition}\n\n–¶–µ–Ω–∞: {price} —Ä—É–±."
        )
        if path:
            full_url = f"http://127.0.0.1:8000/{path}"
            try:
                img_data = requests.get(full_url).content
                with open("temp.jpg", "wb") as handler:
                    handler.write(img_data)
                with open("temp.jpg", "rb") as photo:
                    await update.message.reply_photo(photo=photo, caption=message_text)
            except Exception as e:
                await update.message.reply_text(message_text)
        else:
            await update.message.reply_text(message_text)
        reply_keyboard = [["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"], ["–ù–∞–∑–∞–¥", "–ö–æ—Ä–∑–∏–Ω–∞ üõí"]]
        await update.message.reply_text(
            "–î–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return CONFIRM

async def confirm_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞: –¥–æ–±–∞–≤–∏—Ç—å –ª–∏ –±–ª—é–¥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    user_choice = update.message.text
    if user_choice == "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        return await show_cart(update, context)
    if user_choice == "–ù–∞–∑–∞–¥":
        return await go_back(update, context)
    if user_choice == "–î–∞ ‚úÖ":
        dish = context.user_data.get("selected_dish")
        if dish:
            cart = context.user_data.get("cart", [])
            cart.append(dish)
            context.user_data["cart"] = cart
            context.user_data["selected_dish"] = None
        await update.message.reply_text("–ë–ª—é–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        return await ask_something_else(update, context)
    elif user_choice == "–ù–µ—Ç ‚ùå":
        context.user_data["selected_dish"] = None
        return await go_back(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return CONFIRM

async def confirm_drink_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–∏—Ç–∫–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É."""
    user_choice = update.message.text
    if user_choice == "–ö–æ—Ä–∑–∏–Ω–∞ üõí":
        return await show_cart(update, context)
    if user_choice == "–ù–∞–∑–∞–¥":
        return await go_back(update, context)
    if user_choice == "–î–∞ ‚úÖ":
        cart = context.user_data.get("cart", [])
        cart.append(context.user_data["selected_drink"])
        context.user_data["cart"] = cart
        await update.message.reply_text("–ù–∞–ø–∏—Ç–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        context.user_data["selected_drink"] = None
        reply_keyboard = [["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]]
        await update.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return SOMETHING_ELSE
    elif user_choice == "–ù–µ—Ç ‚ùå":
        context.user_data["selected_drink"] = None
        return await go_back(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return CONFIRM_DRINK

async def ask_something_else(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë."""
    reply_keyboard = [["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]]
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return SOMETHING_ELSE

async def something_else_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å '–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-—Ç–æ –µ—â–µ?'."""
    user_choice = update.message.text
    if user_choice == "–î–∞ ‚úÖ":
        return await show_categories_only(update, context)
    elif user_choice == "–ù–µ—Ç ‚ùå":
        return await proceed_checkout(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return SOMETHING_ELSE

async def comment_decision(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—à–µ–Ω–∏—è –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É."""
    user_choice = update.message.text
    if user_choice == "–î–∞ ‚úÖ":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:", reply_markup=ReplyKeyboardRemove())
        return COMMENT
    elif user_choice == "–ù–µ—Ç ‚ùå":
        context.user_data['comment'] = None
        reply_keyboard = [["–ü–æ–±—ã—Å—Ç—Ä–µ–µ", "–ß–µ—Ä–µ–∑ —á–∞—Å", "–ß–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞"]]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞:",
            reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
        )
        return TIME

async def add_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–∫–∞–∑—É."""
    context.user_data['comment'] = update.message.text
    reply_keyboard = [["–ü–æ–±—ã—Å—Ç—Ä–µ–µ", "–ß–µ—Ä–µ–∑ —á–∞—Å", "–ß–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞"]]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞:",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return TIME

async def order_time_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–∞."""
    user_choice = update.message.text
    valid_choices = ["–ü–æ–±—ã—Å—Ç—Ä–µ–µ", "–ß–µ—Ä–µ–∑ —á–∞—Å", "–ß–µ—Ä–µ–∑ –¥–≤–∞ —á–∞—Å–∞"]
    if user_choice not in valid_choices:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–¥–∞—á–∏.")
        return TIME
    context.user_data['order_time'] = user_choice
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=ReplyKeyboardRemove())
    return NAME

async def add_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∑–∞–∫–∞–∑—á–∏–∫–∞ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã."""
    context.user_data['name'] = update.message.text
    
    cart = context.user_data.get("cart", [])
    total = sum(d["price"] for d in cart if isinstance(d.get("price"), int))

    reply_keyboard = [["–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—É–º–º—É", "–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–æ–≤–∏–Ω—É –æ—Ç —Å—É–º–º—ã"]]
    await update.message.reply_text(
        f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} —Ä—É–±–ª–µ–π üí´\n\n–•–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –ø–æ–ª–æ–≤–∏–Ω—É?",
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return PAYMENT


async def payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ QR-–∫–æ–¥–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø–ª–∞—Ç—ã."""
    cart = context.user_data.get("cart", [])
    total = sum(d["price"] for d in cart if isinstance(d.get("price"), int))
    order_number = random.randint(1000, 9999)
    context.user_data['order_number'] = order_number

    message_text = "–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞:"

    qr_code_url = "http://127.0.0.1:8000/static/qrcode.jpg"
    try:
        img_data = requests.get(qr_code_url).content
        with open("temp_qr.jpg", "wb") as handler:
            handler.write(img_data)
        with open("temp_qr.jpg", "rb") as photo:
            await update.message.reply_photo(photo=photo, caption=message_text)
    except Exception as e:
        await update.message.reply_text(message_text)

    return READY

async def order_ready(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞."""
    order_number = context.user_data.get('order_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
    await update.message.reply_text(f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_number} –≥–æ—Ç–æ–≤! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n\n")
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ ‚≠ê")
    return FEEDBACK

# async def order_ready(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     """–ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞."""
#     conn = sqlite3.connect("db.sqlite3")
#     cursor = conn.cursor()

#     username = update.message.chat.username or "–ê–Ω–æ–Ω–∏–º"
#     cart = context.user_data.get("cart", [])
#     comment = context.user_data.get("comment", "")
#     total_price = sum(d["price"] for d in cart if isinstance(d.get("price"), int))

#     for item in cart:
#         cursor.execute(
#             "INSERT INTO botdata_preorder (username, quantity, comment, total_price, product_id) VALUES (?, ?, ?, ?, ?)",
#             (username, 1, comment, total_price, item["name"]),
#         )

#     conn.commit()
#     conn.close()

#     order_number = context.user_data.get('order_number', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
#     await update.message.reply_text(f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_number} –≥–æ—Ç–æ–≤! –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!\n\n")
#     await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –∑–∞–∫–∞–∑–µ ‚≠ê")

#     context.user_data["cart"] = []
#     context.user_data["comment"] = None
#     context.user_data["order_number"] = None

#     return FEEDBACK


async def feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞."""
    context.user_data['feedback'] = update.message.text
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –£–≤–∏–¥–∏–º—Å—è –µ—â–µ üçï")
    return ConversationHandler.END

async def show_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã —Å –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º–æ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    cart = context.user_data.get("cart", [])
    if not cart:
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."
        reply_keyboard = [["–ù–∞–∑–∞–¥"]]
    else:
        lines = []
        total = 0
        for i, dish in enumerate(cart):
            try:
                price = int(dish["price"])
            except Exception:
                price = 0
            total += price
            lines.append(f"{i+1}. {dish['name']} ‚Äî {dish['price']}")
        text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n" + "\n".join(lines) + f"\n\n–ò—Ç–æ–≥–æ: {total} —Ä—É–±."
        remove_buttons = [[f"–£–¥–∞–ª–∏—Ç—å {i+1}" for i in range(len(cart))]]
        extra_buttons = [["–ù–∞–∑–∞–¥", "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "–î–∞–ª–µ–µ"]]
        reply_keyboard = remove_buttons + extra_buttons

    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CART

    await update.message.reply_text(
        text,
        reply_markup=ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CART

async def cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –∫–æ—Ä–∑–∏–Ω–µ: —É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏, –æ—á–∏—Å—Ç–∫–∞ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É."""
    text = update.message.text
    cart = context.user_data.get("cart", [])

    if text == "–ù–∞–∑–∞–¥":
        return await show_categories_only(update, context)
    elif text == "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É":
        context.user_data["cart"] = []
        await update.message.reply_text("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
        return await show_cart(update, context)
    elif text == "–î–∞–ª–µ–µ":
        return await proceed_checkout(update, context)
    elif text.startswith("–£–¥–∞–ª–∏—Ç—å "):
        try:
            idx = int(text.split()[1]) - 1
            if 0 <= idx < len(cart):
                removed = cart.pop(idx)
                context.user_data["cart"] = cart
                await update.message.reply_text(f"–£–¥–∞–ª–µ–Ω–æ: {removed['name']}")
            else:
                await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –±–ª—é–¥–∞.")
        except Exception as e:
            logger.error(e)
            await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return await show_cart(update, context)
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–ø—Ü–∏—é.")
        return CART

async def proceed_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ä–µ—à–µ–Ω–∏–µ –æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)."""
    await update.message.reply_text(
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É?",
        reply_markup=ReplyKeyboardMarkup([["–î–∞ ‚úÖ", "–ù–µ—Ç ‚ùå"]], one_time_keyboard=True, resize_keyboard=True)
    )
    return COMMENT_DECISION

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞."""
    await update.message.reply_text("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def main():
    application = Application.builder().token("8123547341:AAFNbZz1YFtYp4h6GnC-UvmgmYP42jU-C7g").build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, category_selection)],
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu_selection)],
            CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_selection)],
            CONFIRM_DRINK: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_drink_selection)],
            SOMETHING_ELSE: [MessageHandler(filters.TEXT & ~filters.COMMAND, something_else_handler)],
            COMMENT_DECISION: [MessageHandler(filters.TEXT & ~filters.COMMAND, comment_decision)],
            COMMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_comment)],
            TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_time_selection)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_name)],
            PAYMENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, payment)],
            READY: [MessageHandler(filters.TEXT & ~filters.COMMAND, order_ready)],
            FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, feedback)],
            CART: [MessageHandler(filters.TEXT & ~filters.COMMAND, cart_handler)],
            START_BUTTON: [MessageHandler(filters.TEXT & ~filters.COMMAND, start)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True  
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == '__main__':
    main()
